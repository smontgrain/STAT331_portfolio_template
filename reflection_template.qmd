---
title: "STAT 331 Portfolio"
author: "Sebastien Montgrain"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 2 Question 1

surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
#Lab 3 Question 2

surveys <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  select(census_region, study_year, median_income) |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "median_income_") |>
  arrange(desc(median_income_2018)) |>
  ungroup()
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Lab 4 Question 7

my_colors = colorRampPalette(brewer.pal(7, "Accent"))(10)
graph_maker <- ca_childcare |>
  select(census_region, study_year, starts_with("mc_")) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "monthly_cost") |>
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"), 
         age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")
         )
ggplot(data = graph_maker, 
       mapping = aes(x = study_year, y = monthly_cost,
                     color = fct_reorder2(.f = census_region, .x = study_year, .y = monthly_cost))) +
  geom_point() +
  geom_smooth() +
  theme_bw() +
  theme(aspect.ratio = 1, axis.text.x = element_text(size = 5, angle = 45, hjust = 1)) +
  scale_color_manual(values = my_colors) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year", y = "", color = "California Region") +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = unique(graph_maker$study_year))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Question 5

teacher_evals_clean <- surveys |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id),
         sex = as.factor(sex)) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2
#Challenge 3 Chunk 3

teacher_evals_compare <- surveys |>
  filter(question_no == 903) |>
  mutate(SET_level = case_when(
          SET_score_avg >= 4 ~ "excellent",
          SET_score_avg < 4 ~ "standard"),
         sen_level = case_when(
           seniority <= 4 ~ "junior",
           seniority <= 8 ~ "senior",
           seniority > 8 ~ "very senior"
         )) |>
  select(course_id, SET_level, sen_level)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Challenge 4 Chunk 3

clean_data <- counties |>
  left_join(childcare_costs, join_by(county_fips_code)) |>
  filter(state_name == "California") |>
  group_by(study_year) |>
  summarise(mcsa = median(mcsa, na.rm = TRUE), 
            mfccsa = median(mfccsa, na.rm = TRUE), 
            mhi_2018 = median(mhi_2018, na.rm = TRUE)) |>
  select(study_year, mcsa, mfccsa, mhi_2018)
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5 Chunk 5

gym_member <- get_fit_now_member |>
  left_join(y = get_fit_now_check_in, join_by(id == membership_id)) |>
  filter(str_detect(membership_status, 
           pattern = "gold"), 
         str_detect(id, 
           pattern = "^48Z"))
#two options, Joe Germuska or Jeremy Bowers, need to check license plate now.
plate_check <- almost_everything_data |>
  filter(str_detect(name.x, 
           pattern = "Jeremy Bowers")) |>
  pull(transcript)
plate_check
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 3 Question 1

teacher_evals_compare <- surveys |>
  filter(question_no == 903) |>
  mutate(SET_level = case_when(
          SET_score_avg >= 4 ~ "excellent",
          SET_score_avg < 4 ~ "standard"),
         sen_level = case_when(
           seniority <= 4 ~ "junior",
           seniority <= 8 ~ "senior",
           seniority > 8 ~ "very senior"
         )) |>
  select(course_id, SET_level, sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(county_name, "Superior Counties" = superior_counties,
                                                    "North Coast Counties" = north_coast_counties,
                                                    "San Fancisco Counties" = san_fran_counties,
                                                    "North San Joaquin Valley Counties" = n_san_joaquin_counties,
                                                    "Central Coast Counties" = central_coast_counties,
                                                    "South San Joaquin Valley Counties" = s_san_joaquin_counties,
                                                    "Inland Counties" = inland_counties,
                                                    "Los Angeles County" = la_county,
                                                    "Orange County" = orange_county,
                                                    "San Diego and Imperial County" = san_diego_imperial_counties))
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(county_name, "Superior Counties" = superior_counties,
                                                    "North Coast Counties" = north_coast_counties,
                                                    "San Fancisco Counties" = san_fran_counties,
                                                    "North San Joaquin Valley Counties" = n_san_joaquin_counties,
                                                    "Central Coast Counties" = central_coast_counties,
                                                    "South San Joaquin Valley Counties" = s_san_joaquin_counties,
                                                    "Inland Counties" = inland_counties,
                                                    "Los Angeles County" = la_county,
                                                    "Orange County" = orange_county,
                                                    "San Diego and Imperial County" = san_diego_imperial_counties))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 5 Chunk 5

gym_member <- get_fit_now_member |>
  left_join(y = get_fit_now_check_in, join_by(id == membership_id)) |>
  filter(str_detect(membership_status, 
           pattern = "gold"), 
         str_detect(id, 
           pattern = "^48Z"))
#two options, Joe Germuska or Jeremy Bowers, need to check license plate now.
plate_check <- almost_everything_data |>
  filter(str_detect(name.x, 
           pattern = "Jeremy Bowers")) |>
  pull(transcript)
plate_check
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2
# Challenge 4 Chunk 3

clean_data <- counties |>
  left_join(childcare_costs, join_by(county_fips_code)) |>
  filter(state_name == "California") |>
  group_by(study_year) |>
  summarise(mcsa = median(mcsa, na.rm = TRUE), 
            mfccsa = median(mfccsa, na.rm = TRUE), 
            mhi_2018 = median(mhi_2018, na.rm = TRUE)) |>
  select(study_year, mcsa, mfccsa, mhi_2018)
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Challenge 4 Chunk4

options(width = 200)
clean_data |>
  rename('Center Based Care Price' = mcsa,
         'Family Based Care Price' = mfccsa,
         'Median Income' = mhi_2018) |>
  pivot_longer(cols = c('Center Based Care Price', 'Family Based Care Price', 'Median Income'),
               names_to = "Variable", 
               values_to = "value") |>
  pivot_wider(names_from = study_year, values_from = value) |>
  as.data.frame()

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Challenge 4
-   Lab 2
-   Challenge 2
-   Challenge 3
-   Lab 1

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Challenge 4 Chunk 3

clean_data <- counties |>
  left_join(childcare_costs, join_by(county_fips_code)) |>
  filter(state_name == "California") |>
  group_by(study_year) |>
  summarise(mcsa = median(mcsa, na.rm = TRUE), 
            mfccsa = median(mfccsa, na.rm = TRUE), 
            mhi_2018 = median(mhi_2018, na.rm = TRUE)) |>
  select(study_year, mcsa, mfccsa, mhi_2018)
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4 Question 8

scatterplot <- ca_childcare |>
  select(mc_infant, mhi_2018)
ggplot(data = scatterplot, mapping = aes(x = mhi_2018, y = mc_infant)) +
  geom_point()+
  theme_bw() +
  labs(x = "Median Household Income", y = "Infant Childcare Cost") +
  geom_smooth(method ='lm', formula = y~x)
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Challenge 4 Chunk 5

plot <- clean_data |>
  rename('Weekly Center Based Care Price' = mcsa, 'Weekly Family Based Care Price' = mfccsa, 'Median Income' = mhi_2018) |>
  pivot_longer(cols = -study_year, names_to = "Variable", values_to = "value") |>
  mutate(Variable = fct_relevel(Variable, 
                                "Weekly Center Based Care Price", 
                                "Weekly Family Based Care Price", 
                                "Median Income")
         )

ggplot(plot, aes(study_year, value, color = Variable)) +
  geom_line() +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Year", y = "", title = "Trends in Childcare Cost and Median Income", subtitle = "Measurments in US Dollars") +
  facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
  theme_linedraw() +
  scale_x_continuous(breaks = unique(plot$study_year)) +
  theme(plot.title = element_text(margin = margin(b = 13), face = "bold"), 
        plot.subtitle = element_text(size = 10),
        legend.position = "none",
        aspect.ratio = 0.9,
        axis.text.x = element_text(size = 7, angle = 45, hjust = 1)) +
  scale_color_manual(values = c("orange", "coral1", "steelblue2"))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
#Lab 4 Question 7

my_colors = colorRampPalette(brewer.pal(7, "Accent"))(10)
graph_maker <- ca_childcare |>
  select(census_region, study_year, starts_with("mc_")) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "monthly_cost") |>
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"), 
         age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")
         )
ggplot(data = graph_maker, 
       mapping = aes(x = study_year, y = monthly_cost,
                     color = fct_reorder2(.f = census_region, .x = study_year, .y = monthly_cost))) +
  geom_point() +
  geom_smooth() +
  theme_bw() +
  theme(aspect.ratio = 1, axis.text.x = element_text(size = 5, angle = 45, hjust = 1)) +
  scale_color_manual(values = my_colors) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year", y = "", color = "California Region") +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = unique(graph_maker$study_year))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
#Lab 4 Question 7

my_colors = colorRampPalette(brewer.pal(7, "Accent"))(10)
graph_maker <- ca_childcare |>
  select(census_region, study_year, starts_with("mc_")) |>
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "monthly_cost") |>
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"), 
         age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")
         )
ggplot(data = graph_maker, 
       mapping = aes(x = study_year, y = monthly_cost,
                     color = fct_reorder2(.f = census_region, .x = study_year, .y = monthly_cost))) +
  geom_point() +
  geom_smooth() +
  theme_bw() +
  theme(aspect.ratio = 1, axis.text.x = element_text(size = 5, angle = 45, hjust = 1)) +
  scale_color_manual(values = my_colors) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year", y = "", color = "California Region") +
  facet_grid(~ age_group) +
  scale_x_continuous(breaks = unique(graph_maker$study_year))
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 4 Question 6

ca_childcare |>
  filter(study_year == 2018) |>
  group_by(census_region, study_year) |>
  summarize(median_cost = median(mc_infant, na.rm = TRUE)) |>
  select(census_region, study_year, median_cost) |>
  pivot_wider(names_from = study_year, values_from = median_cost, names_prefix = "median_infant_childcare_cost_") |>
  arrange(desc(median_infant_childcare_cost_2018)) |>
  ungroup() |>
  slice_min(order_by = median_infant_childcare_cost_2018, n = 1)
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
# Challenge 4 Chunk 3

clean_data <- counties |>
  left_join(childcare_costs, join_by(county_fips_code)) |>
  filter(state_name == "California") |>
  group_by(study_year) |>
  summarise(mcsa = median(mcsa, na.rm = TRUE), 
            mfccsa = median(mfccsa, na.rm = TRUE), 
            mhi_2018 = median(mhi_2018, na.rm = TRUE)) |>
  select(study_year, mcsa, mfccsa, mhi_2018)
```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 4 Question 5

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  select(census_region, study_year, median_income) |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "median_income_") |>
  arrange(desc(median_income_2018)) |>
  ungroup()
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
# Lab 4 Question 5

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  select(census_region, study_year, median_income) |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "median_income_") |>
  arrange(desc(median_income_2018)) |>
  ungroup()
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
# Lab 4 Question 5

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  select(census_region, study_year, median_income) |>
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "median_income_") |>
  arrange(desc(median_income_2018)) |>
  ungroup()
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Challenge 4 Chunk 3

clean_data <- counties |>
  left_join(childcare_costs, join_by(county_fips_code)) |>
  filter(state_name == "California") |>
  group_by(study_year) |>
  summarise(mcsa = median(mcsa, na.rm = TRUE), 
            mfccsa = median(mfccsa, na.rm = TRUE), 
            mhi_2018 = median(mhi_2018, na.rm = TRUE)) |>
  select(study_year, mcsa, mfccsa, mhi_2018)
```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Lab 4 Question 9

reg_mod1 <- lm(formula = mc_infant ~ mhi_2018, data = scatterplot)
summary(reg_mod1)
```

-   Example 2

```{r}
#| label: dsm-2-2
#Challenge 3 Question 3

chisq.test(table(teacher_evals_compare$SET_level,
                 teacher_evals_compare$sen_level))
```

-   Example 3

```{r}
#| label: dsm-2-3
# Lab 2 Question 17

species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
